package com.github.yuriisurzhykov.kevent.events.persisted.ksp.generators

import androidx.room.Database
import com.github.yuriisurzhykov.kevent.events.persisted.core.database.AutoMigration
import com.github.yuriisurzhykov.kevent.events.persisted.ksp.wrappers.DaoKSClass
import com.github.yuriisurzhykov.kevent.ksp.core.parseAnnotationClassParameter
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock

/**
 *  This class `DatabaseAnnotationGeneratorWrapper` is responsible for generating the `@Database` annotation for Room
 *  databases. It provides a method `buildAnnotation` which accepts various parameters and generates the [AnnotationSpec].
 *  The generated annotation spec may look like this:
 *  ```kotlin
 *  @Database(
 *      version = 2,
 *      exportSchema = false,
 *      entities = [ManualEntity::class, AutoGeneratedEventEntity::class],
 *      autoMigrations = [AutoMigration(1, 2)]
 *  )
 *  ```
 */
class DatabaseAnnotationGeneratorWrapper {

    /**
     * Main generate method that creates AnnotationSpec for Kotlin Poet to generate @Database annotation based on specs.
     * This method accepts the following parameters:
     *  @param databaseVersion The version of the database.
     *  @param exportSchema A boolean flag indicating whether to export the schema or not
     *  @param migrations A list of [AutoMigration] objects representing automatic database migration specifications.
     *  @param ksEntities A list of `DaoKSClass` objects representing the entity classes.
     *  @param optionalEntities A list of [ClassName] objects representing optional entity classes, that also can be
     *  added to database. Optional entities are manually created classes with @Entity annotation.
     *  @return A generated [AnnotationSpec] object containing the `@Database` annotation.
     * */
    fun buildAnnotation(
        databaseVersion: Int,
        exportSchema: Boolean,
        migrations: List<AutoMigration>,
        ksEntities: List<DaoKSClass>,
        optionalEntities: List<ClassName> = emptyList()
    ): AnnotationSpec {
        val builder = AnnotationSpec.builder(Database::class)
            .appendVersion(databaseVersion)
            .appendExportSchema(exportSchema)
            .appendMigrations(migrations)
            .appendEntities(ksEntities, optionalEntities)

        return builder.build()
    }

    /**
     * This private method appends the `version` attribute to the `AnnotationSpec.Builder`.
     * @param version The version of the database.
     * */
    private fun AnnotationSpec.Builder.appendVersion(version: Int): AnnotationSpec.Builder {
        return addMember("version = %L", version)
    }

    /**
     * This private method appends the `exportSchema` attribute to the `AnnotationSpec.Builder`.
     * @param exportSchema A boolean flag indicating whether to export the schema.
     * */
    private fun AnnotationSpec.Builder.appendExportSchema(exportSchema: Boolean): AnnotationSpec.Builder {
        return addMember("exportSchema = %L", exportSchema)
    }

    /**
     * This private method appends the `entities` attribute to the `AnnotationSpec.Builder`.
     * @param required A list of `DaoKSClass` objects representing the required entity classes.
     * @param optional A list of `ClassName` objects representing the optional entity classes. (default: emptyList())
     * */
    private fun AnnotationSpec.Builder.appendEntities(
        required: List<DaoKSClass>,
        optional: List<ClassName> = emptyList()
    ): AnnotationSpec.Builder {
        val codeBlock = CodeBlock.builder()
        if (required.isNotEmpty()) {
            codeBlock.add(
                required.joinToString { "%T::class" },
                *required.map { it.entityName }.toTypedArray()
            )
        }
        if (optional.isNotEmpty()) {
            codeBlock.add(
                optional.joinToString(prefix = if (required.isNotEmpty()) ", " else "") { "%T::class" },
                *optional.toTypedArray()
            )
        }
        return addMember("entities = [%L]", codeBlock.build())
    }

    /**
     * This private method appends the `autoMigrations` attribute to the `AnnotationSpec.Builder`.
     * @param migrations A list of `AutoMigration` objects representing the specifications of automatic database
     * migrations.
     * */
    private fun AnnotationSpec.Builder.appendMigrations(migrations: List<AutoMigration>): AnnotationSpec.Builder {
        if (migrations.isNotEmpty()) {
            val migrationCodeBlock = CodeBlock.builder()
            migrations.forEachIndexed { index, item ->
                val migrationAnnotation = AnnotationSpec.builder(androidx.room.AutoMigration::class)
                    .addMember("from = %L", item.from)
                    .addMember("to = %L", item.to)
                val specClass = parseAnnotationClassParameter { item.spec }
                if (specClass != ClassName("kotlin", "Any")) {
                    migrationAnnotation.addMember("spec = %T::class", specClass)
                }
                migrationCodeBlock.add("%L", migrationAnnotation.build())
                if (index < migrations.size - 1) {
                    migrationCodeBlock.add(", ")
                }
            }
            addMember(
                "autoMigrations = [%L]",
                migrationCodeBlock.build()
            )
        }
        return this
    }
}