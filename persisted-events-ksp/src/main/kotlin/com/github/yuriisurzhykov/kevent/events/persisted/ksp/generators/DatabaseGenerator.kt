package com.github.yuriisurzhykov.kevent.events.persisted.ksp.generators

import com.github.yuriisurzhykov.kevent.events.persisted.ksp.wrappers.AutoDatabaseKSClass
import com.github.yuriisurzhykov.kevent.events.persisted.ksp.wrappers.DaoKSClass
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.TypeSpec

/**
 * The DatabaseGenerator class generates a database abstract class using the provided [AutoDatabaseKSClass] wrapper
 * and the list of [DaoKSClass] instances. It generates the file structure of database class the Room is used to create
 * implementation for DAOs(both manually created and automatically). The output of this generator may look the
 * following way:
 * ```kotlin
 *  @Database(
 *      version = 2,
 *      exportSchema = false,
 *      entities = [ManualEntity::class, AutoPersistableEventEntity::class],
 *      autoMigrations = [AutoMigration(1, 2)]
 *  )
 *  abstract class YourDatabaseImpl: YourDatabase {
 *       public constructor()
 *
 *       abstract fun autoPersistableDao(): AutoPersistableEventDao
 *  }
 *  ```
 *
 * @property entity The [AutoDatabaseKSClass] instance representing the annotated database class.
 * @property daoEntities The list of [DaoKSClass] instances representing the DAO classes.
 */
class DatabaseGenerator(
    private val entity: AutoDatabaseKSClass,
    private val daoEntities: List<DaoKSClass>
) : FileGenerator {

    private val annotationGenerator = DatabaseAnnotationGeneratorWrapper()

    override fun generate(): FileSpec {
        return FileSpec
            // Creates the file structure
            .builder(entity.packageName, entity.actualClassName)
            // Creates the class
            .addType(
                TypeSpec.classBuilder(entity.actualClassName)
                    // Make class abstract
                    .addModifiers(KModifier.ABSTRACT)
                    // Derive from project database class, marked with @AutoDatabase annotation
                    .superclass(entity.declaredClass)
                    // Create @Database annotation for Room
                    .addAnnotation(generateAnnotation())
                    // Create constructor
                    .addFunction(FunSpec.constructorBuilder().build())
                    // Generate dao getter methods
                    .addFunctions(buildDaoGetters())
                    .build()
            )
            .build()
    }

    /**
     * Creates @Database annotation for autogenerated database class
     * */
    private fun generateAnnotation(): AnnotationSpec {
        return annotationGenerator.buildAnnotation(
            entity.databaseVersion,
            entity.exportSchema,
            entity.migrations,
            daoEntities,
            entity.optionalEntities
        )
    }

    /**
     * Creates the list of dao getters, based on the entities, that are marked with @PersistableEvent annotation
     * */
    private fun buildDaoGetters(): List<FunSpec> {
        return daoEntities.map { entityDeclaration ->
            FunSpec.builder(entityDeclaration.getDaoMethodName())
                .addModifiers(KModifier.ABSTRACT)
                .returns(entityDeclaration.className)
                .build()
        }
    }
}
