package com.github.yuriisurzhykov.kevent.events.persisted.android

import android.app.Application
import androidx.room.Room
import androidx.room.RoomDatabase
import com.github.yuriisurzhykov.kevent.events.persisted.core.database.AutoGeneratedDatabase
import com.github.yuriisurzhykov.kevent.events.persisted.core.events.PersistableEventRegistry
import kotlin.reflect.KClass

/**
 * The `PersistedRegistry` object is needed for creating RoomDatabase instances and
 * binding event registries within an Android application. The Room library is callable
 * only within Android modules for providing data persistence while using comparatively less memory.
 *
 * @see RoomDatabase
 * @see AutoGeneratedDatabase
 * @see Application
 * @see PersistableEventRegistry
 */
@Suppress("unused")
object PersistedRegistry {

    /**
     * This method provides a way to build a RoomDatabase instance. It's generic, so it
     * can be used to build a database instance of any class extending `RoomDatabase`.
     * If class implementation isn't found an exception will be thrown.
     *
     * Usage example:
     * Let's say you declared database class:
     * ```kotlin
     * @AutoDatabase(version = 1, exportSchema = true)
     * abstract class AppDatabase: RoomDatabase(), AutoGeneratedDatabase
     * ```
     * Now in your application's onCreate method you can get instance of autogenerated database:
     * ```kotlin
     * override fun onCreate() {
     *     super.onCreate()
     *     // other logic
     *
     *     val db: AppDatabase = PersistedRegistry.databaseBuilder(application, AppDatabase::class, "DatabaseName").build()
     *
     *     // other logic
     * }
     * ```
     *
     * @param application the Application instance.
     * @param clazz The class of the desired database instance.
     * @param name The name of the database.
     * @return The `RoomDatabase.Builder` of the given class `T`.
     * @throws RuntimeException when class implementation for the given [clazz] is not found
     */
    @JvmStatic
    fun <T : RoomDatabase> databaseBuilder(
        application: Application,
        clazz: KClass<T>,
        name: String
    ): RoomDatabase.Builder<out T> {
        return try {
            Room.databaseBuilder(application, clazz.generatedClass(), name)
        } catch (e: ClassNotFoundException) {
            throw RuntimeException(
                "Cannot find implementation class for ${clazz.qualifiedName}. " +
                        "Check class declaration and make sure that you set it up properly!"
            )
        }
    }

    /**
     * This method binds a `PersistableEventRegistry` to an `AutoGeneratedDatabase`.
     * The `PersistableEventRegistry` provides a way to persist events to a database.
     *
     * If an instance cannot be casted or constructor of provided class cannot be found, an exception is thrown.
     *
     * Usage example:
     * Let's say you declared event registry for project.
     * ```kotlin
     *  @EventRegistry
     *  interface EventRegistry : PersistableEventRegistry
     * ```
     * You can get instance of your event registry just through extension function from your
     * database instance:
     * ```kotlin
     * val registry: EventRegistry = db.eventRegistry(EventRegistry::class)
     * ```
     *
     * @param T The database class which is a parent for auto-generated database.
     * @throws RuntimeException when instance couldn't be cast to the generated class
     * @throws IllegalArgumentException when provided registry class has no constructor with type of the instance
     * @throws RuntimeException when instance couldn't be created out of registry class
     * @return The `PersistableEventRegistry` of type `R`.
     */
    @JvmStatic
    fun <T : AutoGeneratedDatabase> T.eventRegistry(): PersistableEventRegistry {
        val actualClass = PersistableEventRegistry::class.generatedClass()
        try {
            return actualClass.getConstructor(this::class.java.superclass).newInstance(this)
        } catch (e: ClassCastException) {
            throw RuntimeException("Failed to cast $this to generated class! Cause: ${e.message}")
        } catch (e: NoSuchMethodException) {
            throw IllegalArgumentException(
                "Couldn't find implementation for ${PersistableEventRegistry::class.simpleName} with" +
                        " database type ${this::class.simpleName}"
            )
        } catch (e: InstantiationException) {
            throw RuntimeException("Failed to create an instance of registry ${actualClass.simpleName}")
        }
    }
}